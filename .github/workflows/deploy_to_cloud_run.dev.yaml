name: 3a. Deploy Dev to Cloud Run
run-name: ${{ github.actor }} is deploying to Cloud Run - Dev  ðŸš€
on: 
  workflow_run:
      workflows: ["2. Build and Test"] # Run the deploy after successful Build and Test
      types:
        - completed     

jobs:
  deploy_to_cloud_run:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      image_uri_dev: ${{ steps.build.outputs.image_uri_dev }}
      

    steps:
    - uses: actions/checkout@v4

    
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: "${{ secrets.GCP_SVC_ACCOUNT_KEY }}"
      
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ vars.GCP_PROJECT_ID }}
      
    - name: Set up gcloud beta
      run: gcloud components install beta

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

    - name: Build and Push Docker image
      run: |
        IMAGE_URI_DEV="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPO }}/${{ vars.GCP_IMAGE_NAME }}:${{ github.run_number }}"
        docker build -t "$IMAGE_URI_DEV" .
        docker push "$IMAGE_URI_DEV"

        # Set outputs
        echo "image_uri_dev=$IMAGE_URI_DEV" >> $GITHUB_OUTPUT
        
    
    - name: Deploy to Cloud Run
      run: |
        gcloud beta run deploy ${{ vars.GCP_IMAGE_NAME }}  \
          --image "${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPO }}/${{ vars.GCP_IMAGE_NAME }}:${{ github.run_number }}" \
          --platform managed \
          --region ${{ vars.GCP_REGION }} \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 1 \
          --project ${{ vars.GCP_PROJECT_ID  }} \
          --service-account ${{ secrets.GCP_SVC_ACCOUNT }} \
          --allow-unauthenticated  \
          --ingress all
          --set-env-vars FLASK_ENV=${{ vars.FLASK_ENV }},HSTS_MAX_AGE=31536000 \
          --set-env-vars ALLOWED_EMAILS="${{ secrets.ALLOWED_EMAILS }}" \
          --update-secrets DATABASE_URL=DATABASE_URL_DEV:latest,SECRET_KEY=SECRET_KEY:latest \
          


    # Add this new step for database migration
    - name: Run Database Migrations
      run: |
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${{ vars.GCP_SERVICE_NAME }} \
          --region ${{ vars.GCP_REGION }} \
          --project ${{ vars.GCP_PROJECT_ID }} \
          --format 'value(status.url)')
        
        # Run migration using Cloud Run Jobs (recommended) or direct container execution
        gcloud run jobs create migrate-db-dev-${{ github.run_number }} \
          --image "${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPO }}/${{ vars.GCP_IMAGE_NAME }}:${{ github.run_number }}" \
          --region ${{ vars.GCP_REGION }} \
          --project ${{ vars.GCP_PROJECT_ID }} \
          --service-account ${{ secrets.GCP_SVC_ACCOUNT }} \
          --set-env-vars FLASK_APP=app.py,FLASK_ENV=${{ vars.FLASK_ENV }} \
          --update-secrets DATABASE_URL=DATABASE_URL_DEV:latest,SECRET_KEY=SECRET_KEY:latest \
          --command "flask" \
          --args "db" \
          --args "upgrade" \
          --cpu 1 \
          --memory 512Mi \
          --max-retries 3 \
          --parallelism 1 \
          --tasks 1 
          
        
        # Execute the migration job
        gcloud run jobs execute migrate-db-dev-${{ github.run_number }} \
          --region ${{ vars.GCP_REGION }} \
          --project ${{ vars.GCP_PROJECT_ID }} \
          --wait 
        
        # Clean up the migration job
        gcloud run jobs delete migrate-db-dev-${{ github.run_number }} \
          --region ${{ vars.GCP_REGION }} \
          --project ${{ vars.GCP_PROJECT_ID }} \
          --quiet 
 
    - name: Assign custom service account to Cloud Run service
      run: |
        gcloud run services update ${{ vars.GCP_SERVICE_NAME }} \
        --region ${{ vars.GCP_REGION }} \
        --service-account ${{ secrets.GCP_SVC_ACCOUNT }}      